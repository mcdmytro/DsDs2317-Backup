#ifndef __CINT__
#include "RooGlobalFunc.h"
#endif
#include "RooRealVar.h"
#include "RooDataSet.h"
#include "RooGaussian.h"
#include "TCanvas.h"
#include "TAxis.h"
#include "RooPlot.h"
#include "TText.h"
#include "TArrow.h"
#include "TFile.h"

using namespace RooFit;

void Fit_Dsstar_massDelta(){
  gROOT->Reset();
  gSystem->Load("libRooFit");
  
  Float_t range0=0.08, range1=0.2;
  Float_t x0=0.08, x1=0.2;
  RooRealVar *mass = new RooRealVar("mass","",range0,range1);
  TChain chain("h1");
  chain.Add("../Ds2460inBKGnoDsstKmvFit_sgn.root");

  Float_t m_dsw, pst_dsw, dgf_dsw, c2_dsw, cn_dsw, m_dsn, pst_dsn, dgf_dsn, c2_dsn, cn_dsn, m_ds60, mc_ds60, pst_ds60, dgf_ds60, c2_ds60, cn_ds60, p_pi0, dgf_pi0, c2_pi0, c2_phin, dgf_phin, c2_phiw, dgf_phiw, c2_pi0n, dgf_pi0n, p_pi0n, c2_pi0w, dgf_pi0w, p_pi0w, c2_kst0, dgf_kst0, p_kst0, mctr, pstg_dss, hel_phi, hel_ds60, cn_dsn, cos60ds, m_dsst, mc_dsst, egam_dss; 

  chain.SetBranchAddress("m_dsw", &m_dsw);
  chain.SetBranchAddress("pst_dsw", &pst_dsw);
  chain.SetBranchAddress("dgf_dsw", &dgf_dsw);
  chain.SetBranchAddress("c2_dsw", &c2_dsw);
  chain.SetBranchAddress("cn_dsw", &cn_dsw);
  chain.SetBranchAddress("m_dsn", &m_dsn);
  chain.SetBranchAddress("pst_dsn", &pst_dsn);
  chain.SetBranchAddress("dgf_dsn", &dgf_dsn);
  chain.SetBranchAddress("c2_dsn", &c2_dsn);
  chain.SetBranchAddress("cn_dsn", &cn_dsn);
  chain.SetBranchAddress("m_ds60", &m_ds60);
  chain.SetBranchAddress("mc_ds60", &mc_ds60);
  chain.SetBranchAddress("pst_ds60", &pst_ds60);
  chain.SetBranchAddress("dgf_ds60", &dgf_ds60);
  chain.SetBranchAddress("c2_ds60", &c2_ds60);
  chain.SetBranchAddress("cn_ds60", &cn_ds60);
  chain.SetBranchAddress("p_pi0", &p_pi0);
  chain.SetBranchAddress("dgf_pi0", &dgf_pi0);
  chain.SetBranchAddress("c2_pi0", &c2_pi0);
  chain.SetBranchAddress("dgf_phin", &dgf_phin);
  chain.SetBranchAddress("c2_phin", &c2_phin);
  chain.SetBranchAddress("dgf_phiw", &dgf_phiw);
  chain.SetBranchAddress("c2_phiw", &c2_phiw);
  chain.SetBranchAddress("c2_pi0w", &c2_pi0w);
  chain.SetBranchAddress("dgf_pi0w", &dgf_pi0w);
  chain.SetBranchAddress("p_pi0w", &p_pi0w);
  chain.SetBranchAddress("c2_pi0n", &c2_pi0n);
  chain.SetBranchAddress("dgf_pi0n", &dgf_pi0n);
  chain.SetBranchAddress("p_pi0n", &p_pi0n);
  chain.SetBranchAddress("c2_kst0", &c2_kst0);
  chain.SetBranchAddress("dgf_kst0", &dgf_kst0);
  chain.SetBranchAddress("p_kst0", &p_kst0);
  chain.SetBranchAddress("mctr", &mctr);
  chain.SetBranchAddress("pstg_dss", &pstg_dss);
  chain.SetBranchAddress("egam_dss", &egam_dss);
  chain.SetBranchAddress("hel_phi", &hel_phi);
  chain.SetBranchAddress("hel_ds60", &hel_ds60);
  chain.SetBranchAddress("cn_dsn", &cn_dsn);
  chain.SetBranchAddress("cos60ds", &cos60ds);
  chain.SetBranchAddress("m_dsst", &m_dsst);
  chain.SetBranchAddress("mc_dsst", &mc_dsst);
  RooDataSet *data = new RooDataSet("data","", RooArgSet(*mass),"GeV");

  for (int i=0; i<chain.GetEntries();i++){
    chain.GetEntry(i);
    if((m_dsst-m_dsn)>range0 && (m_dsst-m_dsn)<range1 && egam_dss>0.1 && TMath::Abs(hel_phi)>0.35 && hel_ds60<0.7 && (cn_dsn==1 || cn_dsn==3)){
      mass->setVal(m_dsst-m_dsn);
      data->add(RooArgSet(*mass));
    }}
  //TMath::Abs(mc_ds60)==20433 

  RooRealVar *mean  = new RooRealVar("mean", "sgn mean", 0.1439, 0.127, 0.157);
  RooRealVar *sigma = new RooRealVar("sigma", "Sigma of gaussian",0.005, 0.003, 0.015);
  RooGaussian *gaus= new RooGaussian("gaus1", "Gaussian PDF", *mass, *mean, *sigma);
  
  RooRealVar *a0 = new RooRealVar("a0","a0",0.,-100.,100.);
  RooRealVar *a1 = new RooRealVar("a1","a1",0.,-100.,100.);
  RooRealVar *a2 = new RooRealVar("a2","a2",0.,-100.,100.);
  RooRealVar *a3 = new RooRealVar("a3","a3",0.,-100.,100.);
  RooPolynomial *Pol = new RooPolynomial("Pol","Polynomial for background",*mass, RooArgList(*a0,*a1,*a2, *a3));

  RooRealVar *bkg = new RooRealVar("Npol bkg", "", 0., 1E5); 
  RooRealVar *sig = new RooRealVar("Nsig", "N true signal", 0, 1E5);
   
  RooAddPdf *pdf = new RooAddPdf ("pdf", "Gaussian + Pol",RooArgList(*gaus, *Pol), RooArgList(*sig, *bkg));     

  TCanvas *cv=new TCanvas("cv","Just Canvas",5,5,800,800);
  // Define "signal" range in x as [x0,x1]
  mass->setRange("signal",x0,x1) ;
  // Fit pdf only to data in "signal" range
  //RooFitResult *fitresult = pdf->fitTo(*data, Extended(kTRUE), Minos(kFALSE), Save(kTRUE), Range("signal")) ;
  //RooFitResult *fitresult = pdf->fitTo(*data);
  RooPlot *frame = mass->frame(Bins(120));
  data->plotOn(frame);
  gPad->SetLeftMargin(0.2);
  gPad->SetBottomMargin(0.12) ;
  frame->SetTitle("");
  frame->GetXaxis()->SetTitle("M(D_{s}#gamma)-M(D_{s}), GeV ");
  //frame->GetYaxis()->SetTitle("Entries");
  frame->GetXaxis()->SetTitleSize(0.05);
  frame->GetYaxis()->SetTitleSize(0.05);
  frame->GetXaxis()->SetLabelSize(0.05);
  frame->GetYaxis()->SetLabelSize(0.05);
  frame->GetXaxis()->SetNdivisions(505);
  frame->GetYaxis()->SetNdivisions(505);
  frame->GetYaxis()->SetTitleOffset(1.8);
  //frame->GetXaxis()->SetTitleOffset(0.8);
  // frame->SetFillColor(kYellow-8);
  /*
    TPaveText* txt = new TPaveText(0.8,0.8,0.85,0.85,"blNDC");
    txt->SetBorderSize(0);
    txt->SetFillColor(0);
    txt->SetTextSize(0.05);
    txt->SetTextFont(80);
    txt->AddText("(a)") ;
    frame->addObject(txt);
  
  //gaus->paramOn(frame,Layout(0.56,0.89,0.89));
  pdf->paramOn(frame, Format("NELU", FixedPrecision(2)) ,Layout(0.69,0.99,0.99));
  
  pdf->paramOn(frame, Format("NELU", 1) ,Layout(0.6,0.99,0.99));
  frame->getAttText()->SetTextSize(0.025);
  frame->getAttLine()->SetLineWidth(0);
  
  pdf->plotOn(frame);
  pdf->plotOn(frame,Components(RooArgSet(*gaus)),LineColor(kYellow-2),LineStyle(kDashed));
  pdf->plotOn(frame,Components(RooArgSet(*Pol)),LineColor(kRed),LineStyle(kDashed));
  */
  frame->Draw();
  
  cv->SaveAs("DsstinBKG_massDelta_udsBKG.pdf","pdf");
  //fitresult->Print("v");
}
