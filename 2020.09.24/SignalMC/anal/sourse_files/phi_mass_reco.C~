/************************************************
Simple macro to perform 1D fit 
of the phi meson invatiant mass distribution

Author: Dmytro Meleshko
Contact: meleshko.dmytro.hep@knu.ua
Last update: 25.05.2020
************************************************/
/*
#ifndef __CINT__
#include "RooGlobalFunc.h"
#endif
#include "RooRealVar.h"
#include "RooDataSet.h"
#include "RooDataHist.h"
#include "RooGaussian.h"
#include "RooFFTConvPdf.h"
#include "RooAddPdf.h"
#include "TCanvas.h"
#include "TAxis.h"
#include "RooPlot.h"
#include "TText.h"
#include "TArrow.h"
#include "TFile.h"
*/
using namespace RooFit;

void phi_mass_reco(){
  gROOT->Reset();
  gSystem->Load("libRooFit");
  gStyle->SetOptStat(0);
  gStyle->SetOptTitle(0);

  //Set range
  Float_t 
    range0=1.009461,
    range1=1.029461,
    x0=1.009461, 
    x1=1.029461;

  //Add a root file
  TChain chain("h1");
  chain.Add("../../latest.root");

  Float_t m_phi1;
  chain.SetBranchAddress("m_phi1", &m_phi1);

  //Create a dataset and fill it with the data from a root file 
  RooRealVar x("x","x variable", range0, range1);
  RooDataSet data("data","dataset", RooArgSet(x));

  for (int i=0; i<chain.GetEntries(); i++){
    chain.GetEntry(i);
    if(m_phi1<range1 && m_phi1>range0){
      x.setVal(m_phi1);
      data.add(RooArgSet(x));
    }}

  //Perform fit
  RooRealVar
    mean("mean", "Mean of gaussian", 1.01, 1, 1.03),
    sigma_g("sigma", "Sigma of gaussian", 0.002, 0.001, 0.01),
    sigma_bw("sigma_bw","Sigma of a Breit-Wigner ", 0.002, 0.001, 0.004),
    a0("a0","a0 parameter of a polynomial", 0., -100., 100.),
    a1("a1","a1 parameter of a polynomial", 0., -100., 100.);
    
  RooVoigtian voigt("voigt","Reconstructed peak", x, mean, sigma_bw, sigma_g);
  RooGaussian gaus("gaus", "Gaussian for signal", x, mean, sigma_g);
  RooPolynomial pol("pol","Polynomial for background", x, RooArgList(a0, a1)) ;

  RooRealVar 
    sig("sig", "Number of signal events", 0., 1E5),
    bkg("bkg", "Number of background events",0.,1E5);

  RooAddPdf pdf("pdf", "Sum of signal and backgroung", RooArgList(voigt, pol), RooArgList(sig, bkg));

  x.setRange("fit range", x0, x1);
  RooFitResult *fitresult = pdf.fitTo(data, Extended(kTRUE), Save(kTRUE), Range("fit range"), "emhrtv");
  RooPlot *frame = x.frame();
  data.plotOn(frame);
  pdf.plotOn(frame);
  pdf.plotOn(frame, Components(RooArgSet(voigt)), LineColor(kYellow-2), LineStyle(kDashed));
  pdf.plotOn(frame, Components(RooArgSet(pol)), LineColor(kRed), LineStyle(kDashed));

  Int_t ci;   // for color index setting
  ci = TColor::GetColor("#000099");
  frame->SetLineColor(ci);
  frame->SetMarkerSize(0.8);
  frame->GetXaxis()->SetTitle("M(KK), (GeV/c^{2})");
  frame->GetXaxis()->SetNdivisions(507);
  frame->GetXaxis()->SetLabelFont(132);
  frame->GetXaxis()->SetLabelSize(0.05);
  frame->GetXaxis()->SetTitleSize(0.07);
  frame->GetXaxis()->SetTitleFont(132);
  frame->GetYaxis()->SetTitle("Events/0.4 MeV/c^{2}");
  frame->GetYaxis()->SetNdivisions(507);
  frame->GetYaxis()->SetLabelFont(132);
  frame->GetYaxis()->SetLabelSize(0.05);
  frame->GetYaxis()->SetTitleSize(0.07);
  frame->GetYaxis()->SetTitleOffset(0.9);
  frame->GetYaxis()->SetTitleFont(132);
  //frame->GetZaxis()->SetLabelFont(132);
  //frame->GetZaxis()->SetLabelSize(0.05);
  //frame->GetZaxis()->SetTitleSize(0.07);
  //frame->GetZaxis()->SetTitleFont(132);
  
  pdf.plotOn(frame);
  pdf.plotOn(frame, Components(RooArgSet(voigt)), LineColor(kYellow-2), LineStyle(kDashed));
  pdf.plotOn(frame, Components(RooArgSet(pol)), LineColor(kRed), LineStyle(kDashed));

  //Create and customize canvas                                                                                                                                                                             
  TCanvas* cv = new TCanvas("cv", "All events",13, 123, 700, 500);
  cv->Range(-0.2653501,-33.51433,0.2344704,183.1811);
  cv->SetFillColor(0);
  cv->SetBorderMode(0);
  cv->SetBorderSize(2);
  cv->SetLeftMargin(0.1307471);
  cv->SetRightMargin(0.06896552);
  cv->SetTopMargin(0.04661017);
  cv->SetBottomMargin(0.154661);
  cv->SetFrameBorderMode(0);
  cv->SetFrameBorderMode(0);
  frame->Draw();

  cv->SaveAs("../pdf_files/phi_mass_reco.pdf","pdf");
  cv->SaveAs("../eps_files/phi_mass_reco.eps","eps");
}
