#ifndef __CINT__
#include "RooGlobalFunc.h"
#endif
#include "RooRealVar.h"
#include "RooDataSet.h"
#include "RooBreitWigner.h"
#include "RooGaussian.h"
#include "TCanvas.h"
#include "TAxis.h"
#include "RooPlot.h"
#include "TText.h"
#include "TArrow.h"
#include "TFile.h"

using namespace RooFit;

void Delta(){
gROOT->Reset();
gSystem->Load("libRooFit");
Float_t range0=0.15, range1=0.6;
Float_t x0=0.25, x1=0.475;
RooRealVar *mass = new RooRealVar("mass","",range0,range1);
TChain chain("h1");
chain.Add("../Ds2460inDs2317.root");

Float_t 
  m_ds17, cn_dsii, mctr, hel_phi, hel_ds17, pst_ds17, c2_ds17, dgf_ds17, c2_dsii, dgf_dsii, c2_pi0, dgf_pi0, pst_dsii, m_dsii, hel_ds17,
  cn_dsn, m_ds60, mc_ds60, pstg_dss, hel_ds60, pst_ds60, pstg_dss, c2_ds60, dgf_ds60, c2_dsn, dgf_dsn, c2_dsst, dgf_dsst, pst_dsn, m_dsst, hel_ds60, pstg_dss;
  
 chain.SetBranchAddress("m_ds17", &m_ds17);
 chain.SetBranchAddress("m_dsii", &m_dsii);
 chain.SetBranchAddress("cn_dsii", &cn_dsii);
 chain.SetBranchAddress("mctr", &mctr);
 chain.SetBranchAddress("hel_phi", &hel_phi);
 chain.SetBranchAddress("hel_ds17", &hel_ds17);
 chain.SetBranchAddress("pst_ds17", &pst_ds17);
 chain.SetBranchAddress("c2_ds17", &c2_ds17);
 chain.SetBranchAddress("dgf_ds17", &dgf_ds17);
 chain.SetBranchAddress("c2_dsii", &c2_dsii);
 chain.SetBranchAddress("dgf_dsii", &dgf_dsii);
 chain.SetBranchAddress("c2_pi0", &c2_pi0);
 chain.SetBranchAddress("dgf_pi0", &dgf_pi0);
 chain.SetBranchAddress("pst_dsii", &pst_dsii);
 chain.SetBranchAddress("hel_ds17", &hel_ds17);

 chain.SetBranchAddress("cn_dsn", &cn_dsn);
 chain.SetBranchAddress("m_dsst", &m_dsst);
 chain.SetBranchAddress("m_ds60", &m_ds60);
 chain.SetBranchAddress("mc_ds60", &mc_ds60);
 chain.SetBranchAddress("pstg_dss", &pstg_dss);
 chain.SetBranchAddress("hel_ds60", &hel_ds60);
 chain.SetBranchAddress("pst_ds60", &pst_ds60);
 chain.SetBranchAddress("pstg_dss", &pstg_dss);
 chain.SetBranchAddress("c2_ds60", &c2_ds60);
 chain.SetBranchAddress("dgf_ds60", &dgf_ds60);
 chain.SetBranchAddress("c2_dsn", &c2_dsn);
 chain.SetBranchAddress("dgf_dsn", &dgf_dsn);
 chain.SetBranchAddress("c2_dsst", &c2_dsst);
 chain.SetBranchAddress("dgf_dsst", &dgf_dsst);
 chain.SetBranchAddress("pst_dsn", &pst_dsn);
 chain.SetBranchAddress("hel_ds60", &hel_ds60);
 chain.SetBranchAddress("pstg_dss", &pstg_dss);

RooDataSet *data = new RooDataSet("data","", RooArgSet(*mass),"GeV");

for (int i=0; i<chain.GetEntries();i++){
  chain.GetEntry(i);
  //if((m_ds17-m_dsii)>range0 && (m_ds17-m_dsii)<range1 && TMath::Abs(hel_phi)>0.35 && hel_ds17<0.7 && cn_dsn!=2 && TMath::Prob(c2_ds17, dgf_ds17)>0.001 && TMath::Prob(c2_dsii, dgf_dsii)>0.001 && TMath::Prob(c2_pi0, dgf_pi0)>0.01){
  //mass->setVal(m_ds17-m_dsii);
    if((m_ds60-m_dsst)>range0 && (m_ds60-m_dsst)<range1 && TMath::Abs(hel_phi)>0.35 && hel_ds60<0.7 && cn_dsn!=2 && TMath::Prob(c2_ds60, dgf_ds60)>0.001 && TMath::Prob(c2_dsn, dgf_dsn)>0.001 && TMath::Prob(c2_pi0, dgf_pi0)>0.01 && TMath::Prob(c2_dsst, dgf_dsst)>0.001){                                                                                                       
      mass->setVal(m_ds60-m_dsst);  
      data->add(RooArgSet(*mass));
  }}

  RooRealVar *mean = new RooRealVar("mean", "Mean value",0.3461,0.34,0.36,"GeV");
  RooRealVar *sigma_gaus=new RooRealVar("sigma_gaus", "Sigma of gaussian",0.006,0.003,0.25,"GeV");
  
  RooGaussian *gaus= new RooGaussian("gaus", "Gaussian PDF", *mass, *mean, *sigma_gaus);
  
  RooRealVar *a0 = new RooRealVar("a0","a0",1.,-10.,10.);
  RooRealVar *a1 = new RooRealVar("a1","a1",1.,-10.,10.);
  RooRealVar *a2 = new RooRealVar("a2","a2",1.,-10.,10.);
  RooRealVar *a3 = new RooRealVar("a3","a3",1.,-10.,10.);
  RooRealVar *a4 = new RooRealVar("a4","a4",1.,-10.,10.);
  RooPolynomial *pol = new RooPolynomial("pol","Polynomial PDF",*mass, RooArgList(*a0,*a1,*a3)) ;
  
  RooRealVar *sig = new RooRealVar("Nsig", "", 0, 1E5);
  RooRealVar *bkg = new RooRealVar("Nbkg", "", 0, 1E5);

  RooAddPdf *pdf = new RooAddPdf ("pdf", "Sygnal + background PDF",RooArgList(*gaus, *pol), RooArgList(*sig, *bkg));

  TCanvas *cv=new TCanvas("cv","Just Canvas",5,5,800,800);
  // Define "signal" range in x as [x0,x1]
  mass.setRange("signal",x0,x1);  
  // Fit pdf only to data in "signal" range
  RooFitResult *fitresult = pdf->fitTo(*data,Save(kTRUE),Range("signal")) ;
  //RooFitResult *fitresult = pdf->fitTo(*data);
  RooPlot *frame = mass->frame(Title(" "));
  data->plotOn(frame);
  gPad->SetLeftMargin(0.2);
  gPad->SetBottomMargin(0.12) ;
  frame->GetXaxis()->SetTitle("M(D_{s}#pi^{0})-M(D_{s}), GeV ");
  //frame->GetYaxis()->SetTitle("Entries");
  frame->GetXaxis()->SetTitleSize(0.05);
  frame->GetYaxis()->SetTitleSize(0.05);
  frame->GetXaxis()->SetLabelSize(0.05);
  frame->GetYaxis()->SetLabelSize(0.05);
  frame->GetXaxis()->SetNdivisions(505);
  frame->GetYaxis()->SetNdivisions(505);
  frame->GetYaxis()->SetTitleOffset(1.8);
  //xframe->GetXaxis()->SetTitleOffset(0.8);
  // frame->SetFillColor(kYellow-8);
  
  //gaus->paramOn(frame,Layout(0.56,0.89,0.89));
  //pdf->paramOn(frame, Format("NELU", FixedPrecision(2)) ,Layout(0.69,0.99,0.99));
  pdf->paramOn(frame, Format("NEU", 1) ,Layout(0.64,0.99,0.99));
  frame->getAttText()->SetTextSize(0.02);
  frame->getAttLine()->SetLineWidth(0);
  /*
  TPaveText* txt = new TPaveText(0.8,0.8,0.85,0.85,"blNDC");
  txt->SetBorderSize(0);
  txt->SetFillColor(0);
  txt->SetTextSize(0.05);
  txt->SetTextFont(80);
  txt->AddText("(b)") ;
  frame->addObject(txt);
  */
  pdf->plotOn(frame);
  pdf->plotOn(frame,Components(RooArgSet(*gaus)),LineColor(kYellow-2),LineStyle(kDashed));
  pdf->plotOn(frame,Components(RooArgSet(*pol)),LineColor(kRed),LineStyle(kDashed));
  frame->Draw();
  
  //std::cout<<"chi^2 = "<< frame->chiSquare() <<std::endl;
  //Find the Chi2 value
  Double_t chi2 = frame->chiSquare();

  //Find the number of bins of the fit range
  Int_t lower = frame->GetXaxis()->FindFixBin(x0);
  Int_t upper = frame->GetXaxis()->FindFixBin(x1);
  Int_t range = upper-lower;
 
  //Find the number of free parameters
  Int_t dgf=(fitresult->floatParsFinal())->getSize();

  //Find the Chi2/nDOF value
  Double_t new_chi2 = chi2/(range - dgf);

  cout << "\nChi2: " << chi2;
  cout << "\nNumber of bins: " << range;
  cout << "\nNumber of free parameters: " << dgf;
  cout << "\nChi2/nDOF for (Voigt + Polynom3) fit: " << new_chi2 << endl;
  cv->SaveAs("CMC_Delta_Ds2460inDs2317.pdf","pdf");

}
