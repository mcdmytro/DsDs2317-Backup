#ifndef __CINT__
#include "RooGlobalFunc.h"
#endif
#include "RooRealVar.h"
#include "RooDataSet.h"
#include "RooGaussian.h"
#include "TCanvas.h"
#include "TAxis.h"
#include "RooPlot.h"
#include "TText.h"
#include "TArrow.h"
#include "TFile.h"

using namespace RooFit;

void FitData_17(){
gROOT->Reset();
gSystem->Load("libRooFit");
//Float_t range0=1.91, range1=2.05;
Float_t range0=2.1, range1=2.5;
//Float_t x0=1.91, x1=2.05;
Float_t x0=2.2, x1=2.45;
RooRealVar *mass = new RooRealVar("mass","",range0,range1);
TChain chain("h1");
chain.Add("../Ds2317.root");

 Float_t mctr, cos0, r2, hel, pst_dsi, m_dsi, dgf_dsi, c2_dsi, cn_dsi, pst_ds17, m_ds17, dgf_ds17, c2_ds17,  pst_dsii, m_dsii, mc_dsii, dgf_dsii, c2_dsii, cn_dsii, p_pi0, dgf_pi0, c2_pi0, dgf_phi1, c2_phi1, dgf_phi2, c2_phi2, c2_ipi, dgf_ipi, p_ipi, c2_iipi, dgf_iipi, p_iipi, c2_kst0, dgf_kst0, p_kst0, k1_id, k2_id, k3_id, k4_id, pi1_id, pi2_id, mc_ds17, mc_dsi, cosgg;

chain.SetBranchAddress("m_dsi", &m_dsi);
chain.SetBranchAddress("pst_dsi", &pst_dsi);
chain.SetBranchAddress("dgf_dsi", &dgf_dsi);
chain.SetBranchAddress("c2_dsi", &c2_dsi);
chain.SetBranchAddress("cn_dsi", &cn_dsi);
chain.SetBranchAddress("m_dsii", &m_dsii);
chain.SetBranchAddress("mc_dsii", &mc_dsii);
chain.SetBranchAddress("pst_dsii", &pst_dsii);
chain.SetBranchAddress("dgf_dsii", &dgf_dsii);
chain.SetBranchAddress("c2_dsii", &c2_dsii);
chain.SetBranchAddress("cn_dsii", &cn_dsii);
chain.SetBranchAddress("m_ds17", &m_ds17);
chain.SetBranchAddress("pst_ds17", &pst_ds17);
chain.SetBranchAddress("dgf_ds17", &dgf_ds17);
chain.SetBranchAddress("c2_ds17", &c2_ds17);
chain.SetBranchAddress("p_pi0", &p_pi0);
chain.SetBranchAddress("dgf_pi0", &dgf_pi0);
chain.SetBranchAddress("c2_pi0", &c2_pi0);
chain.SetBranchAddress("dgf_phi1", &dgf_phi1);
chain.SetBranchAddress("c2_phi1", &c2_phi1);
chain.SetBranchAddress("dgf_phi2", &dgf_phi2);
chain.SetBranchAddress("c2_phi2", &c2_phi2);
chain.SetBranchAddress("c2_ipi", &c2_ipi);
chain.SetBranchAddress("dgf_ipi", &dgf_ipi);
chain.SetBranchAddress("p_ipi", &p_ipi);
chain.SetBranchAddress("c2_iipi", &c2_iipi);
chain.SetBranchAddress("dgf_iipi", &dgf_iipi);
chain.SetBranchAddress("p_iipi", &p_iipi);
chain.SetBranchAddress("c2_kst0", &c2_kst0);
chain.SetBranchAddress("dgf_kst0", &dgf_kst0);
chain.SetBranchAddress("p_kst0", &p_kst0);
chain.SetBranchAddress("mctr", &mctr);
chain.SetBranchAddress("cos0", &cos0);
chain.SetBranchAddress("r2", &r2);
chain.SetBranchAddress("mc_ds17", &mc_ds17);
chain.SetBranchAddress("mc_dsi", &mc_dsi);
chain.SetBranchAddress("cosgg", &cosgg);

RooDataSet *data = new RooDataSet("data","", RooArgSet(*mass),"GeV");

for (int i=0; i<chain.GetEntries();i++){
  chain.GetEntry(i);
  if(TMath::Abs(mc_ds17)==10431 &&  m_ds17>range0 && m_ds17<range1 && pst_ds17>3.5 && pst_dsii>2.5 && TMath::Abs(hel_phi)>0.35 && hel_ds17<0.7 && TMath::Prob(c2_ds17, dgf_ds17)>0.001 && TMath::Prob(c2_dsii, dgf_dsii)>0.001 && TMath::Prob(c2_pi0, dgf_pi0)>0.01 && cn_dsii!=2){
    mass->setVal(m_ds17);
    data->add(RooArgSet(*mass));
  }}

 RooRealVar *mean = new RooRealVar("mean", "Mean of gaussian",2.3178);
 RooRealVar *mean_g2 = new RooRealVar("bkg mean", "Mean of gaussian",2.3149, 2.31, 2.32);
//RooRealVar *mean = new RooRealVar("mean", "Mean of gaussian",2.3178);  
//RooRealVar *mean_g2 = new RooRealVar("Peaking bkg mean", "Mean of gaussian",2.313);
 RooRealVar *sigma_gaus1=new RooRealVar("#sigma", "Sigma of gaussian",0.0068);
 //RooRealVar *sigma_gaus1=new RooRealVar("sigma_gaus1", "Sigma of gaussian",0.00492);
 RooRealVar *sigma_gaus2=new RooRealVar("bkg #sigma", "Sigma of gaussian",0.0152);
 RooRealVar *sigma_bw = new RooRealVar("sigma_bw","Sigma of Breit Wigner",0.001, 0.,0.010,"GeV");
 //RooRealVar *sigma_bw = new RooRealVar("sigma_bw","Sigma of Breit Wigner",0..0214,0.05,"GeV");

 RooGaussian *gaus1= new RooGaussian("gaus1", "Gaussian PDF", *mass, *mean, *sigma_gaus1);
 RooGaussian *gaus2= new RooGaussian("gaus2", "Gaussian PDF", *mass, *mean_g2, *sigma_gaus2);
 RooBreitWigner *bw = new RooBreitWigner("bw","Breit-Wigner PDF",*mass,*mean, *sigma_bw);
 RooVoigtian *voigt = new RooVoigtian("voigt","Voigt PDF", *mass, *mean, *sigma_bw, *sigma_gaus1);

 //RooRealVar *a0 = new RooRealVar("a0","a0",83.034);
 //RooRealVar *a1 = new RooRealVar("a1","a1",-33.88);
 RooRealVar *a0 = new RooRealVar("a0","a0",0.,-100.,100.);
 RooRealVar *a1 = new RooRealVar("a1","a1",0.,-100.,100.);
 RooRealVar *a2 = new RooRealVar("a2","a2",0.,-100.,100.);
 RooRealVar *a3 = new RooRealVar("a3","a3",0.,-100.,100.);
 RooPolynomial *Pol = new RooPolynomial("Pol","Polynomial for background",*mass, RooArgList(*a0,*a1)) ;

 //RooRealVar *bkg = new RooRealVar("Nbkg", "",9672);
 //RooRealVar *bkg = new RooRealVar("N bkg", "",0.,1E4);
 RooRealVar *bkg_pol = new RooRealVar("N pol bkg", "", 0.,1E5); 
 RooRealVar *bkg_g2 = new RooRealVar("N peaking bkg", "", 1637);
 //RooRealVar *sig = new RooRealVar("Nsig", "",5964);
 RooRealVar *sig = new RooRealVar("N sig", "",2194, 1, 1E4);
 RooRealVar *peak = new RooRealVar("N peak", "", 0.,1E4);
 
 RooRealVar *fpeak = new RooRealVar("fpeak", "peaking background fraction", 0.7471);
 RooAddPdf *sigpeak = new RooAddPdf("sigpeak", "sig+peak", RooArgList(*gaus1, *gaus2), *fpeak); 
 
 RooAddPdf *pdf = new RooAddPdf ("pdf", "Gaussian + Pol",RooArgList(*gaus1, *Pol), RooArgList(*sig, *bkg_pol));
  
 TCanvas *cv=new TCanvas("cv","Just Canvas",5,5,800,800);
 // Define "signal" range in x as [x0,x1]
 mass->setRange("signal",x0,x1) ;
 // Fit pdf only to data in "signal" range
 RooFitResult *fitresult = pdf->fitTo(*data, Extended(kTRUE), Minos(kFALSE), Save(kTRUE), Range("signal")) ;
 //RooFitResult *fitresult = pdf->fitTo(*data);
 RooPlot *frame = mass->frame();
 data->plotOn(frame);
 gPad->SetLeftMargin(0.2);
 gPad->SetBottomMargin(0.12) ;
 frame->SetTitle("");
 frame->GetXaxis()->SetTitle("Mass, GeV ");
 //frame->GetYaxis()->SetTitle("Entries");
 frame->GetXaxis()->SetTitleSize(0.05);
 frame->GetYaxis()->SetTitleSize(0.05);
 frame->GetXaxis()->SetLabelSize(0.05);
 frame->GetYaxis()->SetLabelSize(0.05);
 frame->GetXaxis()->SetNdivisions(505);
 frame->GetYaxis()->SetNdivisions(505);
 frame->GetYaxis()->SetTitleOffset(1.8);
 //frame->GetXaxis()->SetTitleOffset(0.8);
 // frame->SetFillColor(kYellow-8);

 //gaus->paramOn(frame,Layout(0.56,0.89,0.89));
 //pdf->paramOn(frame, Format("NELU", FixedPrecision(2)) ,Layout(0.69,0.99,0.99));
 pdf->paramOn(frame, Format("NELU", 1) ,Layout(0.65,0.99,0.99));
 frame->getAttText()->SetTextSize(0.025);
 frame->getAttLine()->SetLineWidth(0);

 pdf->plotOn(frame);
 pdf->plotOn(frame,Components(RooArgSet(*gaus1)),LineColor(kYellow-2),LineStyle(kDashed));
 pdf->plotOn(frame,Components(RooArgSet(*Pol)),LineColor(kRed),LineStyle(kDashed));
 //pdf->plotOn(frame,Components(RooArgSet(*gaus2)),LineColor(kGreen+3),LineStyle(kDashed));
 frame->Draw();

  std::cout<<"chi^2 = "<< frame->chiSquare() <<std::endl;
  cv->SaveAs("CMC_Ds2317_True.pdf","pdf");
}
